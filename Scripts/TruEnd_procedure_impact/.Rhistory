scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v) +
scale_y_continuous(labels = percent))
(gsurv1c_Combined_ht_1 <- ggplot(Combined_ht_p2_1, aes(x=Time, y=Value)) + geom_line(aes(colour=factor(Dataset), linetype=factor(Dataset))) +
theme_bw() +
labs(x=bquote("Default spell age (months) "*italic(t)), y=bquote("Estimated hazard function [WOFF] "*italic(h(t)))) +
annotate("text", x=50, y=aggrSeries2_1*0.1, size=3, family=chosenFont,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.3f", MAE2_1*100), "%'"), parse=T) +
theme(text=element_text(family=chosenFont),legend.position = "bottom", axis.text.x=element_text(angle=90)) +
scale_color_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_fill_brewer(palette="Dark2", name="Dataset", labels=label.v)+
scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v) +
scale_y_continuous(labels = percent))
# - Cumulative incidence function => F(t) = 1-S(t) = 1-y = 1-KM(t)
(gsurv1c_Combined_Ft_1 <- ggplot(Combined_Ft_p1_1, aes(x=Time, y=Value)) + geom_line(aes(colour=factor(Dataset), linetype=factor(Dataset))) +
theme_bw() +
labs(x=bquote("Default spell age (months) "*italic(t)), y=bquote("Cumulative incidence funciton [WOFF] "*italic(F(t)))) +
annotate("text", x=12, y=aggrSeries1_1*0.9, size=3, family=chosenFont,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.3f", MAE1_1*100), "%'"), parse=T) +
theme(text=element_text(family=chosenFont),legend.position = "bottom", axis.text.x=element_text(angle=90)) +
scale_color_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_fill_brewer(palette="Dark2", name="Dataset", labels=label.v)+
scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v) +
scale_y_continuous(labels = percent))
dpi <- 220
ggsave(print(gsurv1c_Combined_Ft_1,newpage=F), file=paste0(genFigPath,"Ft_1_MAE.png"),width=1200/dpi, height=1000/dpi,dpi=dpi)
# -- TIME 2 between 60 and 120 months
Combined_Ft_p1_2 <- plot.sample1[Time >= 61 & Time <= 120,]
# - Calculate aggregated MAEs
AEs1_2 <- Combined_Ft_p1_2[,list(AE = abs(diff(Value))), by=list(Time)]
(MAE1_2 <- mean(AEs1_2$AE, na.rm=T))
# - Graphing parameters
chosenFont <- "Cambria"
col.v <- brewer.pal(n=3, name = "Set2")[c(1,2,3)]
label.v <- c("a_TruEnd"=bquote(italic(A)[t]*": TruEnd "),
"b_NoTruEnd"=bquote(italic(B)[t]*": No TruEnd "))
linetype.v <- c("solid", "dashed")
aggrSeries1_2 <- max(Combined_Ft_p1_2$Value, na.rm=T)
# - Cumulative incidence function => F(t) = 1-S(t) = 1-y = 1-KM(t)
(gsurv1c_Combined_Ft_2 <- ggplot(Combined_Ft_p1_2, aes(x=Time, y=Value)) + geom_line(aes(colour=factor(Dataset), linetype=factor(Dataset))) +
theme_bw() +
labs(x=bquote("Default spell age (months) "*italic(t)),y=bquote("Cumulative incidence funciton [WOFF] "*italic(F(t)))) +
annotate("text", x=72, y=aggrSeries1_2*0.98, size=3, family=chosenFont,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.3f", MAE1_2*100), "%'"), parse=T) +
theme(text=element_text(family=chosenFont),legend.position = "bottom", axis.text.x=element_text(angle=90)) +
scale_color_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_fill_brewer(palette="Dark2", name="Dataset", labels=label.v)+
scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v) +
scale_y_continuous(labels = percent))
dpi <- 220
ggsave(print(gsurv1c_Combined_Ft_2,newpage=F), file=paste0(genFigPath,"Ft_2_MAE.png"),width=1200/dpi, height=1000/dpi,dpi=dpi)
# --- Hazard functions
# Aggregate to period-level (reporting date)
plot.sample2 <- rbind(Combined[Dataset == "a_TruEnd",list(Time,Dataset,Value = hazard)],
Combined[Dataset == "b_NoTruEnd",list(Time,Dataset,Value = hazard)])
# -- TIME 1 between 0 and 60 months
Combined_ht_p2_1 <- plot.sample2[Time<=60,]
# - Calculate aggregated MAEs
AEs2_1 <- Combined_ht_p2_1[,list(AE = abs(diff(Value))), by=list(Time)]
(MAE2_1 <- mean(AEs2_1$AE, na.rm=T))
# - Graphing parameters
chosenFont <- "Cambria"
col.v <- brewer.pal(n=3, name = "Set2")[c(1,2,3)]
label.v <- c("a_TruEnd"=bquote(italic(A)[t]*": TruEnd "),
"b_NoTruEnd"=bquote(italic(B)[t]*": No TruEnd "))
linetype.v <- c("solid", "dashed")
aggrSeries2_1 <- max(Combined_ht_p2_1$Value, na.rm=T)
#Hazard rate
(gsurv1c_Combined_ht_1 <- ggplot(Combined_ht_p2_1, aes(x=Time, y=Value)) + geom_line(aes(colour=factor(Dataset), linetype=factor(Dataset))) +
theme_bw() +
labs(x=bquote("Default spell age (months) "*italic(t)), y=bquote("Estimated hazard function [WOFF] "*italic(h(t)))) +
annotate("text", x=50, y=aggrSeries2_1*0.1, size=3, family=chosenFont,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.3f", MAE2_1*100), "%'"), parse=T) +
theme(text=element_text(family=chosenFont),legend.position = "bottom", axis.text.x=element_text(angle=90)) +
scale_color_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_fill_brewer(palette="Dark2", name="Dataset", labels=label.v)+
scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v) +
scale_y_continuous(labels = percent))
dpi <- 220
ggsave(print(gsurv1c_Combined_ht_1,newpage=F), file=paste0(genFigPath,"ht_1_MAE.png"),width=1200/dpi, height=1000/dpi,dpi=dpi)
# -- TIME 2 between 61 and 120 months
Combined_ht_p2_2 <- plot.sample2[Time >= 61 & Time <= 120,]
# - Calculate aggregated MAEs
AEs2_2 <- Combined_ht_p2_2[,list(AE = abs(diff(Value))), by=list(Time)]
(MAE2_2 <- mean(AEs2_2$AE, na.rm=T))
# - Graphing parameters
chosenFont <- "Cambria"
col.v <- brewer.pal(n=3, name = "Set2")[c(1,2,3)]
label.v <- c("a_TruEnd"=bquote(italic(A)[t]*": TruEnd "),
"b_NoTruEnd"=bquote(italic(B)[t]*": No TruEnd "))
linetype.v <- c("solid", "dashed")
aggrSeries2_1 <- max(Combined_ht_p2_2$Value, na.rm=T)
# - Cumulative incidence function => F(t) = 1-S(t) = 1-y = 1-KM(t)
(gsurv1c_Combined_ht_2 <- ggplot(Combined_ht_p2_2, aes(x=Time, y=Value)) + geom_line(aes(colour=factor(Dataset), linetype=factor(Dataset))) +
theme_bw() +
labs(x=bquote("Default spell age (months) "*italic(t)), y=bquote("Estimated hazard function [WOFF] "*italic(h(t)))) +
annotate("text", x=110, y=aggrSeries2_1*0.96, size=3, family=chosenFont,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.3f", MAE2_2*100), "%'"), parse=T) +
theme(text=element_text(family=chosenFont),legend.position = "bottom", axis.text.x=element_text(angle=90)) +
scale_color_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_fill_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v) +
scale_y_continuous(labels = percent))
dpi <- 220
ggsave(print(gsurv1c_Combined_ht_2,newpage=F), file=paste0(genFigPath,"ht_2_MAE.png"),width=1200/dpi, height=1000/dpi,dpi=dpi)
# ============================== CUSTOM FUNCTIONS ==============================
# Defining custom functions used across various projects
# ------------------------------------------------------------------------------
# PROJECT TITLE: TruEnd-procedure
# SCRIPT AUTHOR(S): Dr Arno Botha
# DESCRIPTION:
# This script defines various functions that are used elsewhere in this project
# or, indeed, used across other projects. Functions are grouped thematically.
# ==============================================================================
# -------- Ternary functions
# from https://stackoverflow.com/questions/8790143/does-the-ternary-operator-exist-in-r
`%?%` <- function(x, y) list(x = x, y = y)
`%:%` <- function(xy, z) if(xy$x) xy$y else z
# -------- Utility functions
# - Mode function (R doesn't have a built-int one)
getmode <- function(v) {
uniqv <- unique(v);
# discard any missingness
uniqv <- uniqv[complete.cases(uniqv)]
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# - Memory function using 'gdata' package
getMemUsage <- function(limit=1000){
require(gdata); require(scales)
# - Get list of significant object sizes occupied in memory, order ascendingly
totUsage <- ll()
memSize <- subset(totUsage, KB >= limit)
memSize$MB <- memSize$KB/1000
gc(verbose=F)
cat("Total memory used: ", comma(sum(totUsage$KB)/1000), "MB\n")
cat("Big objects size: ", comma(sum(memSize$MB)), "MB\n\n")
return(  memSize[order(memSize$KB), c(1,3)])
}
# -------- Cleaning functions
# Custom function that curates a main vector [x] to equal the previous/most-recent non-
# missing element in a given vector
imputeLastKnown <- function (x) {
# -- Testing purposes
# x <- Lookup$ZeroBal_Remain_Ind; x_lead <- Lookup$ZeroBal_Remain_Ind_lead
# x <- c(0,0,0,1,1,1,0,1)
# x <- c(0,0,0,1,1,1,0,NA)
# x <- c(0,0,0,1,1,1,1,NA)
# x <- c(0,0,0,1,NA,1,0,NA)
# x <- c(0,NA)
firstOne <- which(is.na(x))[1]
if (!is.na(firstOne) & firstOne > 1) {
x[firstOne] <- x[firstOne-1]
# call function recursively to fix earlier missing-cases
return( imputeLastKnown(x))
} else { # no missing value found, return original vector
return(x)
}
}
# Custom function that curates a main vector [x] where x[1] is missing.
# This is achieve by finding the first non-missing element and back-filling that value
imputeFirstKnown <- function(x) {
# -- Testing purposes
# x <- c(NA, NA, 2,3,4)
firstOne <- which(!is.na(x))[1]
if (!is.na(firstOne) & firstOne > 1) {
x[1:(firstOne-1)] <- x[firstOne]
return(x)
} else { # no non-missing value found, return original vector
return(x)
}
}
# ================ 0. Library setup
# ------ Install and load packages
# - data access and big data management
require(haven) # for SAS imports
require(ETLUtils)
require(ffbase)
require(ff)
tempPath <- "C:/TempData"; options("fftempdir"=tempPath)
# for data wrangling
require(tidyr)
require(dplyr)
require(data.table)
require(lubridate)
require(readr)
require(bit64) # for very big numeric values
require(foreach); require(doParallel) # for multi-threaded computing
require(stringr) # common string operations, e.g, str_pad
require(purrr) # mapping functions from tidyverse in working with matrices, lists
require(writexl) #for exporting to Excel
# for analyses & modelling
require(Hmisc)
require(survival) # for survival modelling
#for plots
require(ggplot2)
require(scales)
require(ggthemes)
require(RColorBrewer)
require(extrafont) #remotes::install_version("Rttf2pt1", version = "1.3.8"); Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.55.0/bin/gswin32c.exe"); font_import(); loadfonts(); loadfonts(device="win")
require(survminer)
require(gridExtra)
# ================ 1. Parametrisation
# - general R options
options(scipen=999) # Suppress showing scientific notation
# - To help safeguard against memory overruns during data importing
memory.limit(280000)
# - Parameters used in calculating delinquency measures
sc.Thres <- 0.9; # repayment ratio - g1
d <- 3 # default threshold for g0/g1-measures of delinquency (payments in arrears)
k <- 6 # Probation period
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/TruEnd-Procedure/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/TruEnd-Procedure/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/TruEnd-Procedure/Figures/"
# genFigPath <- "C:/Users/R5422965/OneDrive - FRG/TruEnd-Procedure/Figures/"
# genFigPath <- "C:/TempData"
# - Common path for saving big data objects
genPath <- "C:/Data/TruEnd-Procedure_Data/"
# - Common path for importing raw data
genRawPath <- "C:/Data/"
# ================ 2. Custom functions
# ------ Custom function definitions
# - Load all custom functions defined in a separate R-script
source(paste0(path_cust,"0a.CustomFunctions.R"))
# - Compile Delinquency Calculation Functions (CD, MD/DoD)
source(paste0(path_cust,'DelinqM.R'))
# - Compile the TruEnd-suite of evaluation (and auxiliary) functions
source(paste0(path_cust,'TruEnd.R'))
# ------ 0. Preliminaries
ptm <- proc.time() # for runtime calculations (ignore)
# - Create a path to which the graphs must be saved
graphPath_real <- "C:/Users/R5422965/OneDrive - FRG/TruEnd-Procedure/Figures"
# ------ 1. Graphing setup
windowsFonts("Cambria" = windowsFont("Cambria"))
chosenFont <- "Cambria"
trainGraphs <- "training_slc" # folder location
portName <- "FNB SLC"
# - graphing parameters
col.v <- brewer.pal(10, "Paired")[c(10)]
# ------ 2. Get the relevant data for testing TruEnd and NoTruEnd and sample accordingly
# --- 2.1 TruENd
# Load data
# - Confirm prepared credit data is loaded into memory
if (!exists('datCredit_real')) unpack.ffdf(paste0(genPath,"creditdata_final3-TruEnd"), tempPath)
# --- Sample accordingly | First record per default spell
datSurv_TruEnd <- subset(datCredit_real, ExclusionID==0 & !is.na(DefSpell_Num) & DefSpell_Counter==1, #& Partition == "Observed",
select=c("LoanID", "DefSpell_Key", "DefSpell_Num", "TimeInDefSpell","DefSpell_Age",
"DefSpellResol_Type_Hist")); gc()
rm(datCredit_real); gc()
# --- 2.2 NoTruEnd
# Load data
# - Confirm prepared credit data is loaded into memory
if (!exists('datCredit_real')) unpack.ffdf(paste0(genPath,"creditdata_final3-NoTruEnd"), tempPath)
# --- Sample accordingly | First record per spell
datSurv_NoTruEnd <- subset(datCredit_real, ExclusionID==0 & !is.na(DefSpell_Num) & DefSpell_Counter==1, #& Partition == "Observed",
select=c("LoanID", "DefSpell_Key", "DefSpell_Num", "TimeInDefSpell","DefSpell_Age",
"DefSpellResol_Type_Hist")); gc()
rm(datCredit_real); gc()
# ------ 3. Graphing default quantities
# --- 3.1 TruEnd plots
# --- Compute Kaplan-Meier survival estimates (product-limit) for WOFF-event | Spell-level with right-censoring & left-truncation
# Left-truncated spells will have TimeInDefSpell > 1 while the rest will have TimeInDefSpell = 1, both of
#   which are adjusted during modelling by subtracting 1 (since stop must be > start for KM-estimation)
#   Note: At TimeInDefSpell = 1, already 1 month has lapsed, therefore, the true "start" of a normal account is actually
#     at TimeInDefSpell = 0. Therefore, subtracting one is defensible.
# All competing events preclude the main event from happening and are therefore considered as censored
# ID is set as performing spell key, with no stratification
kmDef_woff_real_spell1c_TruEnd <- survfit(Surv(time=TimeInDefSpell-1, time2=DefSpell_Age, event=DefSpellResol_Type_Hist=="WOFF",
type="counting") ~ 1, id=DefSpell_Key, data=datSurv_TruEnd)
summary(kmDef_woff_real_spell1c_TruEnd)$table
surv_summary(kmDef_woff_real_spell1c_TruEnd)
# --- 3.2 NoTruEnd plots
# --- Compute Kaplan-Meier survival estimates (product-limit) for WOFF-event | Spell-level with right-censoring & left-truncation
# Left-truncated spells will have TimeInDefSpell > 1 while the rest will have TimeInDefSpell = 1, both of
#   which are adjusted during modelling by subtracting 1 (since stop must be > start for KM-estimation)
#   Note: At TimeInDefSpell = 1, already 1 month has lapsed, therefore, the true "start" of a normal account is actually
#     at TimeInDefSpell = 0. Therefore, subtracting one is defensible.
# All competing events preclude the main event from happening and are therefore considered as censored
# ID is set as performing spell key, with no stratification
kmDef_woff_real_spell1c_NoTruEnd <- survfit(Surv(time=TimeInDefSpell-1, time2=DefSpell_Age, event=DefSpellResol_Type_Hist=="WOFF",
type="counting") ~ 1, id=DefSpell_Key, data=datSurv_NoTruEnd)
summary(kmDef_woff_real_spell1c_NoTruEnd)$table
surv_summary(kmDef_woff_real_spell1c_NoTruEnd)
View(kmDef_woff_real_spell1c_NoTruEnd)
View(kmDef_woff_real_spell1c_NoTruEnd)
#Discrete baseline hazard function: h(t)
# create plotting data object
haz_dat_TruEnd <- data.table(Time=kmDef_woff_real_spell1c_TruEnd$time, AtRisk_n=kmDef_woff_real_spell1c_TruEnd$n.risk,
Event_n = kmDef_woff_real_spell1c_TruEnd$n.event, Censored_n=kmDef_woff_real_spell1c_TruEnd$n.censor,
hazard=kmDef_woff_real_spell1c_TruEnd$n.event/kmDef_woff_real_spell1c_TruEnd$n.risk,
CumulHazard = kmDef_woff_real_spell1c_TruEnd$cumhaz, Group="1",
Surv_KM = kmDef_woff_real_spell1c_TruEnd$surv) %>%
filter(Event_n > 0 | Censored_n >0) %>%
# Discrete-time variants
mutate(CumulHazard_Disc = -cumsum(log(1-hazard)), Surv_KM_Disc = cumprod(1-hazard)) %>%
mutate(Event_KM_Disc = 1-Surv_KM_Disc) %>% as.data.table()
haz_dat_TruEnd[, Surv_KM_Disc_prev:= shift(Surv_KM_Disc, n=1, type="lag"), by=list(Group)]
haz_dat_TruEnd[Time==Time[1], hazard2 := 1- Surv_KM_Disc]
haz_dat_TruEnd[Time>Time[1], hazard2 := 1 - Surv_KM_Disc/Surv_KM_Disc_prev]
all.equal(haz_dat_TruEnd$hazard, haz_dat_TruEnd$hazard2) # Should be TRUE
all.equal(haz_dat_TruEnd$Surv_KM, haz_dat_TruEnd$Surv_KM_Disc) # Should be TRUE
all.equal(haz_dat_TruEnd$CumulHazard, haz_dat_TruEnd$CumulHazard_Disc)
# 4.2 NoTruEnd
# - Discrete baseline hazard function: h(t)
# create plotting data object
haz_dat_NoTruEnd <- data.table(Time=kmDef_woff_real_spell1c_NoTruEnd$time, AtRisk_n=kmDef_woff_real_spell1c_NoTruEnd$n.risk,
Event_n = kmDef_woff_real_spell1c_NoTruEnd$n.event, Censored_n=kmDef_woff_real_spell1c_NoTruEnd$n.censor,
hazard=kmDef_woff_real_spell1c_NoTruEnd$n.event/kmDef_woff_real_spell1c_NoTruEnd$n.risk,
CumulHazard = kmDef_woff_real_spell1c_NoTruEnd$cumhaz, Group="1",
Surv_KM = kmDef_woff_real_spell1c_NoTruEnd$surv) %>%
filter(Event_n > 0 | Censored_n >0) %>%
# Discrete-time variants
mutate(CumulHazard_Disc = -cumsum(log(1-hazard)), Surv_KM_Disc = cumprod(1-hazard)) %>%
mutate(Event_KM_Disc = 1-Surv_KM_Disc) %>% as.data.table()
haz_dat_NoTruEnd[, Surv_KM_Disc_prev:= shift(Surv_KM_Disc, n=1, type="lag"), by=list(Group)]
haz_dat_NoTruEnd[Time==Time[1], hazard2 := 1- Surv_KM_Disc]
haz_dat_NoTruEnd[Time>Time[1], hazard2 := 1 - Surv_KM_Disc/Surv_KM_Disc_prev]
all.equal(haz_dat_NoTruEnd$hazard, haz_dat_NoTruEnd$hazard2) # Should be TRUE
all.equal(haz_dat_NoTruEnd$Surv_KM, haz_dat_NoTruEnd$Surv_KM_Disc) # Should be TRUE
all.equal(haz_dat_NoTruEnd$CumulHazard, haz_dat_NoTruEnd$CumulHazard_Disc)
# - Combining the datasets with and without the TruEnd into a single dataset
Combined <- rbind(data.table(haz_dat_TruEnd, Dataset = "a_TruEnd"), data.table(haz_dat_NoTruEnd, Dataset = "b_NoTruEnd"))
# --- Cumulative incidence function => F(t) = 1-S(t) = 1-y = 1-KM(t)
# Aggregate to period-level (reporting date)
plot.sample1 <- rbind(Combined[Dataset == "a_TruEnd",list(Time,Dataset,Value = 1-Surv_KM)],
Combined[Dataset == "b_NoTruEnd",list(Time,Dataset,Value = 1-Surv_KM)])
#Discrete baseline hazard function: h(t)
# create plotting data object
haz_dat_TruEnd <- data.table(Time=kmDef_woff_real_spell1c_TruEnd$time, AtRisk_n=kmDef_woff_real_spell1c_TruEnd$n.risk,
Event_n = kmDef_woff_real_spell1c_TruEnd$n.event, Censored_n=kmDef_woff_real_spell1c_TruEnd$n.censor,
hazard=kmDef_woff_real_spell1c_TruEnd$n.event/kmDef_woff_real_spell1c_TruEnd$n.risk,
CumulHazard = kmDef_woff_real_spell1c_TruEnd$cumhaz, Group="1",
Surv_KM = kmDef_woff_real_spell1c_TruEnd$surv) %>%
filter(Event_n > 0 | Censored_n >0) %>%
# Discrete-time variants
mutate(CumulHazard_Disc = -cumsum(log(1-hazard)), Surv_KM_Disc = cumprod(1-hazard)) %>%
mutate(Event_KM_Disc = 1-Surv_KM_Disc) %>% as.data.table()
haz_dat_TruEnd[, Surv_KM_Disc_prev:= shift(Surv_KM_Disc, n=1, type="lag"), by=list(Group)]
haz_dat_TruEnd[Time==Time[1], hazard2 := 1- Surv_KM_Disc]
haz_dat_TruEnd[Time>Time[1], hazard2 := 1 - Surv_KM_Disc/Surv_KM_Disc_prev]
all.equal(haz_dat_TruEnd$hazard, haz_dat_TruEnd$hazard2) # Should be TRUE
all.equal(haz_dat_TruEnd$Surv_KM, haz_dat_TruEnd$Surv_KM_Disc) # Should be TRUE
all.equal(haz_dat_TruEnd$CumulHazard, haz_dat_TruEnd$CumulHazard_Disc)
# 4.2 NoTruEnd
# - Discrete baseline hazard function: h(t)
# create plotting data object
haz_dat_NoTruEnd <- data.table(Time=kmDef_woff_real_spell1c_NoTruEnd$time, AtRisk_n=kmDef_woff_real_spell1c_NoTruEnd$n.risk,
Event_n = kmDef_woff_real_spell1c_NoTruEnd$n.event, Censored_n=kmDef_woff_real_spell1c_NoTruEnd$n.censor,
hazard=kmDef_woff_real_spell1c_NoTruEnd$n.event/kmDef_woff_real_spell1c_NoTruEnd$n.risk,
CumulHazard = kmDef_woff_real_spell1c_NoTruEnd$cumhaz, Group="1",
Surv_KM = kmDef_woff_real_spell1c_NoTruEnd$surv) %>%
filter(Event_n > 0 | Censored_n >0) %>%
# Discrete-time variants
mutate(CumulHazard_Disc = -cumsum(log(1-hazard)), Surv_KM_Disc = cumprod(1-hazard)) %>%
mutate(Event_KM_Disc = 1-Surv_KM_Disc) %>% as.data.table()
haz_dat_NoTruEnd[, Surv_KM_Disc_prev:= shift(Surv_KM_Disc, n=1, type="lag"), by=list(Group)]
haz_dat_NoTruEnd[Time==Time[1], hazard2 := 1- Surv_KM_Disc]
haz_dat_NoTruEnd[Time>Time[1], hazard2 := 1 - Surv_KM_Disc/Surv_KM_Disc_prev]
all.equal(haz_dat_NoTruEnd$hazard, haz_dat_NoTruEnd$hazard2) # Should be TRUE
all.equal(haz_dat_NoTruEnd$Surv_KM, haz_dat_NoTruEnd$Surv_KM_Disc) # Should be TRUE
all.equal(haz_dat_NoTruEnd$CumulHazard, haz_dat_NoTruEnd$CumulHazard_Disc)
# - Combining the datasets with and without the TruEnd into a single dataset
Combined <- rbind(data.table(haz_dat_TruEnd, Dataset = "a_TruEnd"), data.table(haz_dat_NoTruEnd, Dataset = "b_NoTruEnd"))
# --- Cumulative incidence function => F(t) = 1-S(t) = 1-y = 1-KM(t)
# Aggregate to period-level (reporting date)
plot.sample1 <- rbind(Combined[Dataset == "a_TruEnd",list(Time,Dataset,Value = 1-Surv_KM)],
Combined[Dataset == "b_NoTruEnd",list(Time,Dataset,Value = 1-Surv_KM)])
# -- TIME 1 between 0 and 60 months
Combined_Ft_p1_1 <- plot.sample1[Time<=60,]
# - Calculate aggregated MAEs
AEs1_1 <- Combined_Ft_p1_1[,list(AE = abs(diff(Value))), by=list(Time)]
(MAE1_1 <- mean(AEs1_1$AE, na.rm=T))
# - Graphing parameters
chosenFont <- "Cambria"
col.v <- brewer.pal(n=3, name = "Set2")[c(1,2,3)]
label.v <- c("a_TruEnd"=bquote(italic(A)[t]*": TruEnd "),
"b_NoTruEnd"=bquote(italic(B)[t]*": No TruEnd "))
linetype.v <- c("solid", "dashed")
aggrSeries1_1 <- max(Combined_Ft_p1_1$Value, na.rm=T)
# - Cumulative incidence function => F(t) = 1-S(t) = 1-y = 1-KM(t)
(gsurv1c_Combined_Ft_1 <- ggplot(Combined_Ft_p1_1, aes(x=Time, y=Value)) + geom_line(aes(colour=factor(Dataset), linetype=factor(Dataset))) +
theme_bw() +
labs(x=bquote("Default spell age (months) "*italic(t)), y=bquote("Cumulative incidence funciton [WOFF] "*italic(F(t)))) +
annotate("text", x=12, y=aggrSeries1_1*0.9, size=3, family=chosenFont,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.3f", MAE1_1*100), "%'"), parse=T) +
theme(text=element_text(family=chosenFont),legend.position = "bottom", axis.text.x=element_text(angle=90)) +
scale_color_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_fill_brewer(palette="Dark2", name="Dataset", labels=label.v)+
scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v) +
scale_y_continuous(labels = percent))
dpi <- 220
ggsave(print(gsurv1c_Combined_Ft_1,newpage=F), file=paste0(genFigPath,"Ft_1_MAE.png"),width=1200/dpi, height=1000/dpi,dpi=dpi)
# -- TIME 2 between 60 and 120 months
Combined_Ft_p1_2 <- plot.sample1[Time >= 61 & Time <= 120,]
# - Calculate aggregated MAEs
AEs1_2 <- Combined_Ft_p1_2[,list(AE = abs(diff(Value))), by=list(Time)]
(MAE1_2 <- mean(AEs1_2$AE, na.rm=T))
# - Graphing parameters
chosenFont <- "Cambria"
col.v <- brewer.pal(n=3, name = "Set2")[c(1,2,3)]
label.v <- c("a_TruEnd"=bquote(italic(A)[t]*": TruEnd "),
"b_NoTruEnd"=bquote(italic(B)[t]*": No TruEnd "))
linetype.v <- c("solid", "dashed")
aggrSeries1_2 <- max(Combined_Ft_p1_2$Value, na.rm=T)
# - Cumulative incidence function => F(t) = 1-S(t) = 1-y = 1-KM(t)
(gsurv1c_Combined_Ft_2 <- ggplot(Combined_Ft_p1_2, aes(x=Time, y=Value)) + geom_line(aes(colour=factor(Dataset), linetype=factor(Dataset))) +
theme_bw() +
labs(x=bquote("Default spell age (months) "*italic(t)),y=bquote("Cumulative incidence funciton [WOFF] "*italic(F(t)))) +
annotate("text", x=72, y=aggrSeries1_2*0.98, size=3, family=chosenFont,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.3f", MAE1_2*100), "%'"), parse=T) +
theme(text=element_text(family=chosenFont),legend.position = "bottom", axis.text.x=element_text(angle=90)) +
scale_color_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_fill_brewer(palette="Dark2", name="Dataset", labels=label.v)+
scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v) +
scale_y_continuous(labels = percent))
dpi <- 220
ggsave(print(gsurv1c_Combined_Ft_2,newpage=F), file=paste0(genFigPath,"Ft_2_MAE.png"),width=1200/dpi, height=1000/dpi,dpi=dpi)
# --- Hazard functions
# Aggregate to period-level (reporting date)
plot.sample2 <- rbind(Combined[Dataset == "a_TruEnd",list(Time,Dataset,Value = hazard)],
Combined[Dataset == "b_NoTruEnd",list(Time,Dataset,Value = hazard)])
# -- TIME 1 between 0 and 60 months
Combined_ht_p2_1 <- plot.sample2[Time<=60,]
# - Calculate aggregated MAEs
AEs2_1 <- Combined_ht_p2_1[,list(AE = abs(diff(Value))), by=list(Time)]
(MAE2_1 <- mean(AEs2_1$AE, na.rm=T))
# - Graphing parameters
chosenFont <- "Cambria"
col.v <- brewer.pal(n=3, name = "Set2")[c(1,2,3)]
label.v <- c("a_TruEnd"=bquote(italic(A)[t]*": TruEnd "),
"b_NoTruEnd"=bquote(italic(B)[t]*": No TruEnd "))
linetype.v <- c("solid", "dashed")
aggrSeries2_1 <- max(Combined_ht_p2_1$Value, na.rm=T)
#Hazard rate
(gsurv1c_Combined_ht_1 <- ggplot(Combined_ht_p2_1, aes(x=Time, y=Value)) + geom_line(aes(colour=factor(Dataset), linetype=factor(Dataset))) +
theme_bw() +
labs(x=bquote("Default spell age (months) "*italic(t)), y=bquote("Estimated hazard function [WOFF] "*italic(h(t)))) +
annotate("text", x=50, y=aggrSeries2_1*0.1, size=3, family=chosenFont,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.3f", MAE2_1*100), "%'"), parse=T) +
theme(text=element_text(family=chosenFont),legend.position = "bottom", axis.text.x=element_text(angle=90)) +
scale_color_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_fill_brewer(palette="Dark2", name="Dataset", labels=label.v)+
scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v) +
scale_y_continuous(labels = percent))
dpi <- 220
ggsave(print(gsurv1c_Combined_ht_1,newpage=F), file=paste0(genFigPath,"ht_1_MAE.png"),width=1200/dpi, height=1000/dpi,dpi=dpi)
# -- TIME 2 between 61 and 120 months
Combined_ht_p2_2 <- plot.sample2[Time >= 61 & Time <= 120,]
# - Calculate aggregated MAEs
AEs2_2 <- Combined_ht_p2_2[,list(AE = abs(diff(Value))), by=list(Time)]
(MAE2_2 <- mean(AEs2_2$AE, na.rm=T))
# - Graphing parameters
chosenFont <- "Cambria"
col.v <- brewer.pal(n=3, name = "Set2")[c(1,2,3)]
label.v <- c("a_TruEnd"=bquote(italic(A)[t]*": TruEnd "),
"b_NoTruEnd"=bquote(italic(B)[t]*": No TruEnd "))
linetype.v <- c("solid", "dashed")
aggrSeries2_1 <- max(Combined_ht_p2_2$Value, na.rm=T)
# - Cumulative incidence function => F(t) = 1-S(t) = 1-y = 1-KM(t)
(gsurv1c_Combined_ht_2 <- ggplot(Combined_ht_p2_2, aes(x=Time, y=Value)) + geom_line(aes(colour=factor(Dataset), linetype=factor(Dataset))) +
theme_bw() +
labs(x=bquote("Default spell age (months) "*italic(t)), y=bquote("Estimated hazard function [WOFF] "*italic(h(t)))) +
annotate("text", x=110, y=aggrSeries2_1*0.96, size=3, family=chosenFont,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.3f", MAE2_2*100), "%'"), parse=T) +
theme(text=element_text(family=chosenFont),legend.position = "bottom", axis.text.x=element_text(angle=90)) +
scale_color_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_fill_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v) +
scale_y_continuous(labels = percent))
dpi <- 220
ggsave(print(gsurv1c_Combined_ht_2,newpage=F), file=paste0(genFigPath,"ht_2_MAE.png"),width=1200/dpi, height=1000/dpi,dpi=dpi)
# -- TIME 3 between 121 and 240 months
Combined_Ft_p1_3 <- plot.sample1[Time >= 121 & Time <= 240,]
# - Calculate aggregated MAEs
AEs1_3 <- Combined_Ft_p1_3[,list(AE = abs(diff(Value))), by=list(Time)]
(MAE1_3 <- mean(AEs1_3$AE, na.rm=T))
# - Graphing parameters
chosenFont <- "Cambria"
col.v <- brewer.pal(n=3, name = "Set2")[c(1,2,3)]
label.v <- c("a_TruEnd"=bquote(italic(A)[t]*": TruEnd "),
"b_NoTruEnd"=bquote(italic(B)[t]*": No TruEnd "))
linetype.v <- c("solid", "dashed")
aggrSeries1_2 <- max(Combined_Ft_p1_3$Value, na.rm=T)
# - Cumulative incidence function => F(t) = 1-S(t) = 1-y = 1-KM(t)
(gsurv1c_Combined_Ft_3 <- ggplot(Combined_Ft_p1_3, aes(x=Time, y=Value)) + geom_line(aes(colour=factor(Dataset), linetype=factor(Dataset))) +
theme_bw() +
labs(x="Default spell age (months)", y="Cumulative incidence funciton [WOFF] ~ KM estimates") +
annotate("text", x=140, y=aggrSeries1_2*0.99, size=3, family=chosenFont,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.3f", MAE1_3*100), "%'"), parse=T) +
theme(text=element_text(family=chosenFont),legend.position = "bottom", axis.text.x=element_text(angle=90)) +
scale_color_brewer(palette="Dark2", name="Dataset", labels=label.v) +
scale_fill_brewer(palette="Dark2", name="Dataset", labels=label.v)+
scale_linetype_manual(name="Dataset", values=linetype.v, labels=label.v))
dpi <- 180
ggsave(print(gsurv1c_Combined_Ft_3,newpage=F), file=paste0(genFigPath,"Ft_3_MAE.png"),width=1200/dpi, height=1000/dpi,dpi=dpi)
View(haz_dat_NoTruEnd)
View(haz_dat_NoTruEnd)
View(haz_dat_TruEnd)
View(haz_dat_TruEnd)
View(MAE_combined_surv)
View(MAE_combined_surv)
View(MAE_combined_surv2)
View(MAE_combined_surv2)
TEST_MAE_combined_surv2 <- MAE_combined_surv2
TEST_MAE_combined_surv2 <- TEST_MAE_combined_surv2 %>% mutate(F_TruEnd = 1-TEST_MAE_combined_surv2$NoTruEnd)
View(TEST_MAE_combined_surv2)
TEST_MAE_combined_surv2 <- MAE_combined_surv2
TEST_MAE_combined_surv2 <- TEST_MAE_combined_surv2 %>% mutate(F_TruEnd = 1-TEST_MAE_combined_surv2$TruEnd)
TEST_MAE_combined_surv2 <- TEST_MAE_combined_surv2 %>% mutate(F_NoTruEnd = 1-TEST_MAE_combined_surv2$NoTruEnd)
View(TEST_MAE_combined_surv2)
View(TEST_MAE_combined_surv2)
